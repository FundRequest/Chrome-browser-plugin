/* GENERATED BY TYPECHAIN VER. 0.1.4 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class FundRepository extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "totalBalance",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "callers",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "requestsFunded",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "changeOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "totalFunded",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "totalNumberOfFunders",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      { payable: false, stateMutability: "nonpayable", type: "fallback" },
      {
        constant: false,
        inputs: [
          { name: "_from", type: "address" },
          { name: "_platform", type: "bytes32" },
          { name: "_platformId", type: "string" }
        ],
        name: "updateFunders",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_from", type: "address" },
          { name: "_platform", type: "bytes32" },
          { name: "_platformId", type: "string" },
          { name: "_token", type: "address" },
          { name: "_value", type: "uint256" }
        ],
        name: "updateBalances",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "platform", type: "bytes32" },
          { name: "platformId", type: "string" },
          { name: "_token", type: "address" }
        ],
        name: "claimToken",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "platform", type: "bytes32" },
          { name: "platformId", type: "string" }
        ],
        name: "finishResolveFund",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_platform", type: "bytes32" },
          { name: "_platformId", type: "string" },
          { name: "_funder", type: "address" },
          { name: "_token", type: "address" }
        ],
        name: "getFundInfo",
        outputs: [
          { name: "", type: "uint256" },
          { name: "", type: "uint256" },
          { name: "", type: "uint256" }
        ],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_platform", type: "bytes32" },
          { name: "_platformId", type: "string" }
        ],
        name: "getFundedTokenCount",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_platform", type: "bytes32" },
          { name: "_platformId", type: "string" },
          { name: "_index", type: "uint256" }
        ],
        name: "getFundedTokensByIndex",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_platform", type: "bytes32" },
          { name: "_platformId", type: "string" }
        ],
        name: "getFunderCount",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_platform", type: "bytes32" },
          { name: "_platformId", type: "string" },
          { name: "_funder", type: "address" },
          { name: "_token", type: "address" }
        ],
        name: "amountFunded",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [
          { name: "_platform", type: "bytes32" },
          { name: "_platformId", type: "string" },
          { name: "_token", type: "address" }
        ],
        name: "balance",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_caller", type: "address" },
          { name: "allowed", type: "bool" }
        ],
        name: "updateCaller",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<FundRepository> {
    const contract = new FundRepository(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get owner(): Promise<string> {
    return promisify(this.rawWeb3Contract.owner, []);
  }
  public get requestsFunded(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.requestsFunded, []);
  }
  public get totalNumberOfFunders(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.totalNumberOfFunders, []);
  }
  public totalBalance(arg0: BigNumber | string): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.totalBalance, [arg0.toString()]);
  }
  public callers(arg0: BigNumber | string): Promise<boolean> {
    return promisify(this.rawWeb3Contract.callers, [arg0.toString()]);
  }
  public totalFunded(arg0: BigNumber | string): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.totalFunded, [arg0.toString()]);
  }
  public getFundInfo(
    _platform: BigNumber,
    _platformId: string,
    _funder: BigNumber | string,
    _token: BigNumber | string
  ): Promise<[BigNumber, BigNumber, BigNumber]> {
    return promisify(this.rawWeb3Contract.getFundInfo, [
      _platform.toString(),
      _platformId.toString(),
      _funder.toString(),
      _token.toString()
    ]);
  }
  public getFundedTokenCount(
    _platform: BigNumber,
    _platformId: string
  ): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getFundedTokenCount, [
      _platform.toString(),
      _platformId.toString()
    ]);
  }
  public getFundedTokensByIndex(
    _platform: BigNumber,
    _platformId: string,
    _index: BigNumber | number
  ): Promise<string> {
    return promisify(this.rawWeb3Contract.getFundedTokensByIndex, [
      _platform.toString(),
      _platformId.toString(),
      _index.toString()
    ]);
  }
  public getFunderCount(
    _platform: BigNumber,
    _platformId: string
  ): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.getFunderCount, [
      _platform.toString(),
      _platformId.toString()
    ]);
  }
  public amountFunded(
    _platform: BigNumber,
    _platformId: string,
    _funder: BigNumber | string,
    _token: BigNumber | string
  ): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.amountFunded, [
      _platform.toString(),
      _platformId.toString(),
      _funder.toString(),
      _token.toString()
    ]);
  }
  public balance(
    _platform: BigNumber,
    _platformId: string,
    _token: BigNumber | string
  ): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.balance, [
      _platform.toString(),
      _platformId.toString(),
      _token.toString()
    ]);
  }

  public changeOwnerTx(
    _newOwner: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "changeOwner", [
      _newOwner.toString()
    ]);
  }
  public updateFundersTx(
    _from: BigNumber | string,
    _platform: BigNumber,
    _platformId: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "updateFunders", [
      _from.toString(),
      _platform.toString(),
      _platformId.toString()
    ]);
  }
  public updateBalancesTx(
    _from: BigNumber | string,
    _platform: BigNumber,
    _platformId: string,
    _token: BigNumber | string,
    _value: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "updateBalances", [
      _from.toString(),
      _platform.toString(),
      _platformId.toString(),
      _token.toString(),
      _value.toString()
    ]);
  }
  public claimTokenTx(
    platform: BigNumber,
    platformId: string,
    _token: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "claimToken", [
      platform.toString(),
      platformId.toString(),
      _token.toString()
    ]);
  }
  public finishResolveFundTx(
    platform: BigNumber,
    platformId: string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "finishResolveFund",
      [platform.toString(), platformId.toString()]
    );
  }
  public updateCallerTx(
    _caller: BigNumber | string,
    allowed: boolean
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "updateCaller", [
      _caller.toString(),
      allowed.toString()
    ]);
  }
}
