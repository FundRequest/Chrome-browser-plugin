/* GENERATED BY TYPECHAIN VER. 0.1.4 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class FundRequestContract extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: "claimSignerAddress",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "preconditions",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "fundRepository",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "claimRepository",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "changeOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          { name: "_fundRepository", type: "address" },
          { name: "_claimRepository", type: "address" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      { payable: false, stateMutability: "nonpayable", type: "fallback" },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "from", type: "address" },
          { indexed: false, name: "platform", type: "bytes32" },
          { indexed: false, name: "platformId", type: "string" },
          { indexed: false, name: "token", type: "address" },
          { indexed: false, name: "value", type: "uint256" }
        ],
        name: "Funded",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "solverAddress", type: "address" },
          { indexed: false, name: "platform", type: "bytes32" },
          { indexed: false, name: "platformId", type: "string" },
          { indexed: false, name: "solver", type: "string" },
          { indexed: false, name: "token", type: "address" },
          { indexed: false, name: "value", type: "uint256" }
        ],
        name: "Claimed",
        type: "event"
      },
      {
        constant: false,
        inputs: [
          { name: "_platform", type: "bytes32" },
          { name: "_platformId", type: "string" },
          { name: "_token", type: "address" },
          { name: "_value", type: "uint256" }
        ],
        name: "fund",
        outputs: [{ name: "success", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_from", type: "address" },
          { name: "_amount", type: "uint256" },
          { name: "_token", type: "address" },
          { name: "_data", type: "bytes" }
        ],
        name: "receiveApproval",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "platform", type: "bytes32" },
          { name: "platformId", type: "string" },
          { name: "solver", type: "string" },
          { name: "solverAddress", type: "address" },
          { name: "r", type: "bytes32" },
          { name: "s", type: "bytes32" },
          { name: "v", type: "uint8" }
        ],
        name: "claim",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_precondition", type: "address" }],
        name: "addPrecondition",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_index", type: "uint256" }],
        name: "removePrecondition",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_repositoryAddress", type: "address" }],
        name: "setFundRepository",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_claimRepository", type: "address" }],
        name: "setClaimRepository",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_claimSignerAddress", type: "address" }],
        name: "setClaimSignerAddress",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<FundRequestContract> {
    const contract = new FundRequestContract(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get claimSignerAddress(): Promise<string> {
    return promisify(this.rawWeb3Contract.claimSignerAddress, []);
  }
  public get fundRepository(): Promise<string> {
    return promisify(this.rawWeb3Contract.fundRepository, []);
  }
  public get owner(): Promise<string> {
    return promisify(this.rawWeb3Contract.owner, []);
  }
  public get claimRepository(): Promise<string> {
    return promisify(this.rawWeb3Contract.claimRepository, []);
  }
  public preconditions(arg0: BigNumber | number): Promise<string> {
    return promisify(this.rawWeb3Contract.preconditions, [arg0.toString()]);
  }

  public changeOwnerTx(
    _newOwner: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "changeOwner", [
      _newOwner.toString()
    ]);
  }
  public fundTx(
    _platform: BigNumber,
    _platformId: string,
    _token: BigNumber | string,
    _value: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "fund", [
      _platform.toString(),
      _platformId.toString(),
      _token.toString(),
      _value.toString()
    ]);
  }
  public receiveApprovalTx(
    _from: BigNumber | string,
    _amount: BigNumber | number,
    _token: BigNumber | string,
    _data: BigNumber[]
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "receiveApproval", [
      _from.toString(),
      _amount.toString(),
      _token.toString(),
      _data.toString()
    ]);
  }
  public claimTx(
    platform: BigNumber,
    platformId: string,
    solver: string,
    solverAddress: BigNumber | string,
    r: BigNumber,
    s: BigNumber,
    v: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "claim", [
      platform.toString(),
      platformId.toString(),
      solver.toString(),
      solverAddress.toString(),
      r.toString(),
      s.toString(),
      v.toString()
    ]);
  }
  public addPreconditionTx(
    _precondition: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "addPrecondition", [
      _precondition.toString()
    ]);
  }
  public removePreconditionTx(
    _index: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "removePrecondition",
      [_index.toString()]
    );
  }
  public setFundRepositoryTx(
    _repositoryAddress: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "setFundRepository",
      [_repositoryAddress.toString()]
    );
  }
  public setClaimRepositoryTx(
    _claimRepository: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "setClaimRepository",
      [_claimRepository.toString()]
    );
  }
  public setClaimSignerAddressTx(
    _claimSignerAddress: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "setClaimSignerAddress",
      [_claimSignerAddress.toString()]
    );
  }
}
