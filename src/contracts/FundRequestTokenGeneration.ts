/* GENERATED BY TYPECHAIN VER. 0.1.4 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class FundRequestTokenGeneration extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: true,
        inputs: [],
        name: "maxCap",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "rate",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "tokensaleWallet",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "unpause",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "uint256" }],
        name: "allowedCountries",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "tokenContract",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "paused",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "pause",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "personalCapActive",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "owner",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "founderWallet",
        outputs: [{ name: "", type: "address" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_newOwner", type: "address" }],
        name: "changeOwner",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "personalCap",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "allowed",
        outputs: [{ name: "", type: "uint8" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [],
        name: "totalCollected",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        constant: true,
        inputs: [{ name: "", type: "address" }],
        name: "deposits",
        outputs: [{ name: "", type: "uint256" }],
        payable: false,
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          { name: "_tokenAddress", type: "address" },
          { name: "_founderWallet", type: "address" },
          { name: "_tokensaleWallet", type: "address" },
          { name: "_rate", type: "uint256" },
          { name: "_maxCap", type: "uint256" },
          { name: "_personalCap", type: "uint256" }
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "constructor"
      },
      { payable: true, stateMutability: "payable", type: "fallback" },
      {
        anonymous: false,
        inputs: [
          { indexed: true, name: "_beneficiary", type: "address" },
          { indexed: false, name: "_weiAmount", type: "uint256" },
          { indexed: false, name: "_tokenAmount", type: "uint256" },
          { indexed: false, name: "_personalCapActive", type: "bool" }
        ],
        name: "Paid",
        type: "event"
      },
      { anonymous: false, inputs: [], name: "Pause", type: "event" },
      { anonymous: false, inputs: [], name: "Unpause", type: "event" },
      {
        constant: false,
        inputs: [{ name: "_owner", type: "address" }],
        name: "proxyPayment",
        outputs: [{ name: "", type: "bool" }],
        payable: true,
        stateMutability: "payable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "beneficiary", type: "address" },
          { name: "tokensSold", type: "uint256" }
        ],
        name: "allocateTokens",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [],
        name: "finalizeTokenSale",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "beneficiary", type: "address" },
          { name: "_country", type: "uint8" }
        ],
        name: "allow",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_beneficiaries", type: "address[]" },
          { name: "_country", type: "uint8" }
        ],
        name: "allowMultiple",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_country", type: "uint8" },
          { name: "_allowed", type: "bool" }
        ],
        name: "allowCountry",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_maxCap", type: "uint256" }],
        name: "setMaxCap",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_tokensaleWallet", type: "address" }],
        name: "setTokensaleWallet",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_founderWallet", type: "address" }],
        name: "setFounderWallet",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_capInWei", type: "uint256" }],
        name: "setPersonalCap",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_active", type: "bool" }],
        name: "setPersonalCapActive",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_token", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "withdrawToken",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [{ name: "_to", type: "address" }],
        name: "withdraw",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_from", type: "address" },
          { name: "_to", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "onTransfer",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        constant: false,
        inputs: [
          { name: "_owner", type: "address" },
          { name: "_spender", type: "address" },
          { name: "_amount", type: "uint256" }
        ],
        name: "onApprove",
        outputs: [{ name: "", type: "bool" }],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<FundRequestTokenGeneration> {
    const contract = new FundRequestTokenGeneration(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public get maxCap(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.maxCap, []);
  }
  public get rate(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.rate, []);
  }
  public get tokensaleWallet(): Promise<string> {
    return promisify(this.rawWeb3Contract.tokensaleWallet, []);
  }
  public get tokenContract(): Promise<string> {
    return promisify(this.rawWeb3Contract.tokenContract, []);
  }
  public get paused(): Promise<boolean> {
    return promisify(this.rawWeb3Contract.paused, []);
  }
  public get personalCapActive(): Promise<boolean> {
    return promisify(this.rawWeb3Contract.personalCapActive, []);
  }
  public get owner(): Promise<string> {
    return promisify(this.rawWeb3Contract.owner, []);
  }
  public get founderWallet(): Promise<string> {
    return promisify(this.rawWeb3Contract.founderWallet, []);
  }
  public get personalCap(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.personalCap, []);
  }
  public get totalCollected(): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.totalCollected, []);
  }
  public allowedCountries(arg0: BigNumber | number): Promise<boolean> {
    return promisify(this.rawWeb3Contract.allowedCountries, [arg0.toString()]);
  }
  public allowed(arg0: BigNumber | string): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.allowed, [arg0.toString()]);
  }
  public deposits(arg0: BigNumber | string): Promise<BigNumber> {
    return promisify(this.rawWeb3Contract.deposits, [arg0.toString()]);
  }

  public unpauseTx(): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "unpause", []);
  }
  public pauseTx(): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "pause", []);
  }
  public changeOwnerTx(
    _newOwner: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "changeOwner", [
      _newOwner.toString()
    ]);
  }
  public proxyPaymentTx(
    _owner: BigNumber | string
  ): DeferredTransactionWrapper<IPayableTxParams> {
    return new DeferredTransactionWrapper<IPayableTxParams>(
      this,
      "proxyPayment",
      [_owner.toString()]
    );
  }
  public allocateTokensTx(
    beneficiary: BigNumber | string,
    tokensSold: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "allocateTokens", [
      beneficiary.toString(),
      tokensSold.toString()
    ]);
  }
  public finalizeTokenSaleTx(): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "finalizeTokenSale",
      []
    );
  }
  public allowTx(
    beneficiary: BigNumber | string,
    _country: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "allow", [
      beneficiary.toString(),
      _country.toString()
    ]);
  }
  public allowMultipleTx(
    _beneficiaries: string[],
    _country: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "allowMultiple", [
      _beneficiaries.toString(),
      _country.toString()
    ]);
  }
  public allowCountryTx(
    _country: BigNumber | number,
    _allowed: boolean
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "allowCountry", [
      _country.toString(),
      _allowed.toString()
    ]);
  }
  public setMaxCapTx(
    _maxCap: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setMaxCap", [
      _maxCap.toString()
    ]);
  }
  public setTokensaleWalletTx(
    _tokensaleWallet: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "setTokensaleWallet",
      [_tokensaleWallet.toString()]
    );
  }
  public setFounderWalletTx(
    _founderWallet: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setFounderWallet", [
      _founderWallet.toString()
    ]);
  }
  public setPersonalCapTx(
    _capInWei: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "setPersonalCap", [
      _capInWei.toString()
    ]);
  }
  public setPersonalCapActiveTx(
    _active: boolean
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(
      this,
      "setPersonalCapActive",
      [_active.toString()]
    );
  }
  public withdrawTokenTx(
    _token: BigNumber | string,
    _amount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "withdrawToken", [
      _token.toString(),
      _amount.toString()
    ]);
  }
  public withdrawTx(
    _to: BigNumber | string
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "withdraw", [
      _to.toString()
    ]);
  }
  public onTransferTx(
    _from: BigNumber | string,
    _to: BigNumber | string,
    _amount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "onTransfer", [
      _from.toString(),
      _to.toString(),
      _amount.toString()
    ]);
  }
  public onApproveTx(
    _owner: BigNumber | string,
    _spender: BigNumber | string,
    _amount: BigNumber | number
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "onApprove", [
      _owner.toString(),
      _spender.toString(),
      _amount.toString()
    ]);
  }
}
