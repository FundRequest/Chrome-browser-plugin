/* GENERATED BY TYPECHAIN VER. 0.1.4 */
/* tslint:disable */

import { BigNumber } from "bignumber.js";
import {
  TypeChainContract,
  promisify,
  ITxParams,
  IPayableTxParams,
  DeferredTransactionWrapper
} from "./typechain-runtime";

export class ApproveAndCallFallBack extends TypeChainContract {
  public readonly rawWeb3Contract: any;

  public constructor(web3: any, address: string | BigNumber) {
    const abi = [
      {
        constant: false,
        inputs: [
          { name: "from", type: "address" },
          { name: "_amount", type: "uint256" },
          { name: "_token", type: "address" },
          { name: "_data", type: "bytes" }
        ],
        name: "receiveApproval",
        outputs: [],
        payable: false,
        stateMutability: "nonpayable",
        type: "function"
      }
    ];
    super(web3, address, abi);
  }

  static async createAndValidate(
    web3: any,
    address: string | BigNumber
  ): Promise<ApproveAndCallFallBack> {
    const contract = new ApproveAndCallFallBack(web3, address);
    const code = await promisify(web3.eth.getCode, [address]);
    if (code === "0x0") {
      throw new Error(`Contract at ${address} doesn't exist!`);
    }
    return contract;
  }

  public receiveApprovalTx(
    from: BigNumber | string,
    _amount: BigNumber | number,
    _token: BigNumber | string,
    _data: BigNumber[]
  ): DeferredTransactionWrapper<ITxParams> {
    return new DeferredTransactionWrapper<ITxParams>(this, "receiveApproval", [
      from.toString(),
      _amount.toString(),
      _token.toString(),
      _data.toString()
    ]);
  }
}
